// File for  all API Handling
const fetch = require("node-fetch");
require("dotenv").config();
const express = require("express");
const router = express.Router();
console.log("âœ… ENV loaded. PredictHQ token present?", !!process.env.PREDICTHQ_TOKEN);

const Amadeus = require("amadeus");

// --- Amadeus client ---
const amadeus = new Amadeus({
	clientId: process.env.AMA_KEY,
	clientSecret: process.env.AMA_SECRET,
	hostname: process.env.AMA_HOST === "production" ? "production" : "test",
});

const app = express();
const session = require("express-session");
router.use(
	session({
		secret: "secret",
		resave: false,
		saveUninitialized: false,
		cookie: { secure: process.env.NODE_ENV === "production" },
	})
);

// -----------------------------------------------
// Health
//-----------------------------------------------

router.get("/health", (req, res) => {
	res.json({
		ok: true,
		node: process.version,
		amadeusHost: amadeus.client.hostname,
		hasAmaKey: !!process.env.AMA_KEY,
		hasAmaSecret: !!process.env.AMA_SECRET,
		hasGoogleKey: !!process.env.API_KEY,
		hasPredictHQ: !!process.env.PREDICTHQ_TOKEN,

	});
});

// -----------------------------------------------
// Hotels (Google Places)
// -----------------------------------------------
router.get("/hotels", async (req, res, next) => {
	try {
		const { city, page = 1, limit = 10 } = req.query;

		if (!city || typeof city !== "string" || city.trim().length === 0) {
			return res.status(400).json({
				error: "City parameter is required",
				message: "Please provide a valid city name",
			});
		}

		if (!process.env.API_KEY) {
			console.error("Google Maps API key is not configured");
			return res.status(500).json({
				error: "API configuration error",
				message: "Google Maps API key is not configured",
			});
		}

		const cityName = city.trim();

		// 1) Geocode
		const geocodeUrl = `https://maps.googleapis.com/maps/api/geocode/json?address=${encodeURIComponent(
			cityName
		)}&key=${process.env.API_KEY}`;
		const geoRes = await fetch(geocodeUrl);
		const geoData = await geoRes.json();

		if (geoData.status !== "OK" || !geoData.results.length) {
			return res.status(404).json({
				error: "City not found",
				message: `Could not find location for "${cityName}". Please check the spelling and try again.`,
				status: geoData.status,
				details: geoData.error_message,
			});
		}

		const { lat, lng } = geoData.results[0].geometry.location;

		// 2) Nearby Places
		const placesUrl = `https://maps.googleapis.com/maps/api/place/nearbysearch/json?location=${lat},${lng}&radius=5000&type=lodging&key=${process.env.API_KEY}`;
		const placesRes = await fetch(placesUrl);
		const placesData = await placesRes.json();

		if (placesData.status !== "OK") {
			return res.status(500).json({
				error: "Places API error",
				message: "Failed to search for hotels. Please try again later.",
				status: placesData.status,
				details: placesData.error_message,
			});
		}

		if (!placesData.results || placesData.results.length === 0) {
			return res.json({
				hotels: [],
				pagination: {
					currentPage: parseInt(page, 10),
					limit: parseInt(limit, 10),
					totalHotels: 0,
					hasMore: false,
					showing: "0 of 0",
				},
			});
		}

		// 3) Pagination + details
		const pageNum = parseInt(page, 10);
		const limitNum = parseInt(limit, 10);
		const startIndex = (pageNum - 1) * limitNum;
		const endIndex = startIndex + limitNum;
		const paginatedResults = placesData.results.slice(startIndex, endIndex);

		const hotelsWithUrls = await Promise.all(
			paginatedResults.map(async (place) => {
				try {
					const detailsUrl = `https://maps.googleapis.com/maps/api/place/details/json?place_id=${place.place_id}&fields=name,vicinity,url,rating,formatted_phone_number,website&key=${process.env.API_KEY}`;
					const detailsRes = await fetch(detailsUrl);
					const detailsData = await detailsRes.json();
					return {
						name: detailsData.result?.name || place.name,
						vicinity: detailsData.result?.vicinity || place.vicinity,
						url: detailsData.result?.url || null,
						rating: detailsData.result?.rating ?? place.rating ?? null,
						place_id: place.place_id,
					};
				} catch (err) {
					console.error("Error in hotelsWithUrls:", err);
					return {
						name: place.name,
						vicinity: place.vicinity,
						url: null,
						rating: place.rating ?? null,
						place_id: place.place_id,
					};
				}
			})
		);

		res.json({
			hotels: hotelsWithUrls,
			pagination: {
				currentPage: pageNum,
				limit: limitNum,
				totalHotels: placesData.results.length,
				hasMore: endIndex < placesData.results.length,
				showing: `${Math.min(endIndex, placesData.results.length)} of ${placesData.results.length
					}`,
			},
		});
	} catch (error) {
		console.error("Error in /api/hotels:", error);
		next(error);
	}
});

// -----------------------------------------------
// Activities (Amadeus: Tours & Activities)
// Supports: q (text), minPrice, maxPrice, category, page, pageSize
// -----------------------------------------------

// helpers
const clampInt = (v, { min = 1, max = 1_000_000, def = 1 } = {}) => {
	const n = Number.parseInt(v, 10);
	if (Number.isFinite(n)) return Math.min(max, Math.max(min, n));
	return def;
};


const priceNum = (p) => (p && p.amount ? Number(p.amount) : NaN);

const CATEGORY_KEYWORDS = {
	TOURS: [
		"tour",
		"guided",
		"walk",
		"walking",
		"excursion",
		"sightseeing",
		"guide",
	],
	RESTAURANT: [
		"restaurant",
		"food",
		"dining",
		"wine",
		"tasting",
		"culinary",
		"bistro",
	],
	MUSEUM: ["museum", "gallery", "exhibit", "exhibition", "art", "heritage"],
	NIGHTLIFE: [
		"nightlife",
		"club",
		"bar",
		"pub",
		"cabaret",
		"burlesque",
		"show",
	],
	SHOPPING: ["shopping", "market", "boutique", "mall", "fashion", "souvenir"],
	SIGHTS: [
		"tower",
		"landmark",
		"monument",
		"cathedral",
		"basilica",
		"palace",
		"castle",
		"bridge",
		"view",
		"panorama",
		"lookout",
	],
};
console.log("PredictHQ loaded:", !!process.env.PREDICTHQ_TOKEN);
async function resolveCityGeo({ city, countryCode }, { amadeus, googleApiKey }) {
	// Try Amadeus first
	try {
		const resp = await amadeus.referenceData.locations.cities.get({
			keyword: city,
			...(countryCode ? { countryCode } : {}),
			"page[limit]": 3,
		});
		const json = JSON.parse(resp.body);
		const match = (json.data || [])[0];
		if (match?.geoCode) return { name: match.name, geoCode: match.geoCode };
	} catch (_) { }

	// Fallback: Google Geocoding
	if (googleApiKey) {
		try {
			const url = `https://maps.googleapis.com/maps/api/geocode/json?address=${encodeURIComponent(
				city
			)}&key=${googleApiKey}`;
			const r = await fetch(url);
			const j = await r.json();
			const first = (j.results || [])[0];
			if (first?.geometry?.location) {
				return {
					name: first.formatted_address || city,
					geoCode: {
						latitude: first.geometry.location.lat,
						longitude: first.geometry.location.lng,
					},
				};
			}
		} catch (_) { }
	}
	return null;
}

router.get("/activities/by-city", async (req, res) => {
	try {
		const city = (req.query.city || "").trim();
		const category = (req.query.category || "").trim();
		const q = (req.query.q || "").trim();
		const onlyFree = req.query.onlyFree === "true";
		const eventDate = req.query.eventDate || null;
		const pageSize = Number(req.query.pageSize) || 50;

		if (!city) return res.status(400).json({ error: "Missing city" });
		if (!process.env.PREDICTHQ_TOKEN)
			return res.status(500).json({ error: "Missing PredictHQ token" });

		const geo = await resolveCityGeo({ city }, { amadeus, googleApiKey: process.env.API_KEY });
		if (!geo) return res.status(404).json({ error: `City "${city}" not found via Geocoding` });

		const { latitude, longitude } = geo.geoCode;

		const baseUrl = new URL("https://api.predicthq.com/v1/events/");
		baseUrl.searchParams.set("within", `10km@${latitude},${longitude}`);
		baseUrl.searchParams.set("limit", String(pageSize));
		baseUrl.searchParams.set("sort", "start");

		if (category) baseUrl.searchParams.set("category", category);
		if (q) baseUrl.searchParams.set("q", q);
		if (onlyFree) baseUrl.searchParams.set("price", "free");
		if (eventDate) {
			baseUrl.searchParams.set("start.gte", `${eventDate}T00:00:00Z`);
			baseUrl.searchParams.set("start.lte", `${eventDate}T23:59:59Z`);
		}

		const res2 = await fetch(baseUrl.href, {
			headers: { Authorization: `Bearer ${process.env.PREDICTHQ_TOKEN}` },
		});

		if (!res2.ok) throw new Error(await res2.text());
		const data = await res2.json();

		const formatted = (data.results || []).map((e) => {
			// Try to extract a usable website URL
			let url =
				e.url ||
				(e.entities?.[0]?.url ?? null) ||
				`https://www.google.com/search?q=${encodeURIComponent(e.title + " " + (e.location?.[0] || city))}`;

			return {
				id: e.id,
				name: e.title,
				location: e.entities?.[0]?.name || city,
				startTime: e.start,
				endTime: e.end,
				category: e.category,
				url,
				image: e.images?.[0]?.url || null,
				shortDescription: e.description || "No description available.",
			};
		});

		res.json({
			data: formatted,
			meta: {
				total: data.count,
				city,
				geo,
				source: "PredictHQ",
			},
		});
	} catch (err) {
		console.error("[/api/activities/by-city] ERROR:", err);
		res.status(500).json({ error: "PredictHQ API failed", details: err.message });
	}
});

// -----------------------------------------------
// ðŸŸ¦ Google Places â€” /api/places/by-city
// -----------------------------------------------
router.get("/places/by-city", async (req, res) => {
	try {
		const { city, type = "restaurant", page = 1, limit = 20 } = req.query;

		if (!city) return res.status(400).json({ error: "City is required" });
		if (!process.env.API_KEY) {
			return res.status(500).json({ error: "Missing Google API Key" });
		}

		// Geocode city
		const geoUrl = `https://maps.googleapis.com/maps/api/geocode/json?address=${encodeURIComponent(
			city
		)}&key=${process.env.API_KEY}`;
		const geoRes = await fetch(geoUrl);
		const geoData = await geoRes.json();

		if (geoData.status !== "OK" || !geoData.results.length) {
			return res.status(404).json({ error: `City "${city}" not found` });
		}

		const { lat, lng } = geoData.results[0].geometry.location;

		// Nearby search
		const placesUrl = `https://maps.googleapis.com/maps/api/place/nearbysearch/json?location=${lat},${lng}&radius=5000&type=${type}&key=${process.env.API_KEY}`;
		const placesRes = await fetch(placesUrl);
		const placesData = await placesRes.json();

		if (placesData.status !== "OK") {
			return res.status(500).json({
				error: "Google Places API failed",
				details: placesData.error_message || placesData.status,
			});
		}

		const formatted = await Promise.all(
			(placesData.results || []).map(async (p) => {
				let website = null;

				try {
					const detailsUrl = `https://maps.googleapis.com/maps/api/place/details/json?place_id=${p.place_id}&fields=website,url&key=${process.env.API_KEY}`;
					const detailsRes = await fetch(detailsUrl);
					const detailsData = await detailsRes.json();
					website = detailsData.result?.website || detailsData.result?.url || null;
				} catch (_) { }

				return {
					id: p.place_id,
					name: p.name,
					address: p.vicinity || city,
					rating: p.rating || null,
					photo: p.photos
						? `https://maps.googleapis.com/maps/api/place/photo?maxwidth=400&photo_reference=${p.photos[0].photo_reference}&key=${process.env.API_KEY}`
						: null,
					officialUrl: website, // âœ… Official website (if available)
					mapsUrl: `https://www.google.com/maps/place/?q=place_id:${p.place_id}`, // âœ… Always available fallback
					shortDescription: p.types ? p.types.join(", ") : "No details available",
				};
			})
		);

		res.json({ data: formatted });
	} catch (err) {
		console.error("Error in /api/places/by-city:", err);
		res.status(500).json({ error: "Google Places API failed", details: err.message });
	}
});

// -----------------------------------------------
// Flights (Amadeus Flight Offers Search)
// -----------------------------------------------
router.get("/flights", async (req, res) => {
	try {
		const {
			origin,
			dest,
			date,
			adults = "1",
			returnDate,
			currencyCode,
		} = req.query;
		if (!origin || !dest || !date) {
			return res
				.status(400)
				.json({ error: "origin, dest, and date are required" });
		}

		const params = {
			originLocationCode: origin.toUpperCase(),
			destinationLocationCode: dest.toUpperCase(),
			departureDate: date, // YYYY-MM-DD
			adults: String(adults),
			max: 20,
			...(returnDate ? { returnDate } : {}),
			...(currencyCode ? { currencyCode } : {}),
		};

		const response = await amadeus.shopping.flightOffersSearch.get(params);
		res.json(JSON.parse(response.body));
	} catch (err) {
		console.error("Amadeus error:", err?.response?.result || err.message);
		res.status(500).json({
			error: "Amadeus search failed",
			details: err?.response?.result || err.message,
		});
	}
});

module.exports = router;

// Car Rental // 
router.get("/cars", async (req, res) => {
	const { origin, dest, pickupDate, returnDate, driversAge } = req.query;
  
	try {
		const response = await amadeus.shopping.vehicleOffers.get({
			pickupLocationCode: origin,
			dropOffLocationCode: dest || origin,
			pickupDate,
			returnDate,
			driversAge: driversAge || 25,
		  });
		  
	  res.json(response.data);
	} catch (err) {
	  console.error("Car rental error â†’", err);
	  res.status(500).json({ error: "Car search failed" });
	}
  });