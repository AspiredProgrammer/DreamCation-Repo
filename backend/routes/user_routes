require("dotenv").config();
const bcrypt = require("bcryptjs");
const passport = require("passport");
const express = require("express");
const router = express.Router();
const connect_query = require("../config/db_set_up");
const { check, validationResult } = require("express-validator");
const jwt = require("jsonwebtoken");

//potentially move this somewhere else?
// const session = require("express-session");
// router.use(
// 	session({
// 		secret: process.env.SESSION_SECRET,
// 		resave: false,
// 		saveUninitialized: false,
// 		cookie: { secure: process.env.NODE_ENV === "production" },
// 	})
// );

router.post("/register", async (req, res) => {
	await check("firstName", "First Name is required").notEmpty().run(req);
	await check("lastName", "Last Name is required").notEmpty().run(req);
	await check("username", "Username is required").notEmpty().run(req);
	await check("email", "Email is required").notEmpty().run(req);
	await check("email", "Email is invalid").isEmail().run(req);
	await check("password", "Password is required").notEmpty().run(req);
	await check("phoneNum", "Phone number is required").notEmpty().run(req);
	await check("confirm_password", "Confirm password is required")
		.notEmpty()
		.run(req);
	await check("confirm_password", "Password and confirm password do not match")
		.equals(req.body.password)
		.run(req);
	//  after the password is confirmed, hash and save that in the db

	const errors = validationResult(req);

	if (!errors.isEmpty()) {
		return res.status(400).json({ errors: errors.array() });
	}

	try {
		const connection = await connect_query();

		//here we check whether the user already exists:
		let [rows] = await connection.execute(
			"SELECT * from users WHERE email = ?",
			[req.body.email]
		);
		//if there is at least one row of results, it means a user with this email already exists:
		if (rows.length > 0) {
			return res.status(400).json({ msg: "This User already exists" });
		}
		const hashedPassword = await bcrypt.hash(req.body.password, 10);

		// here we run a mysql query to actually insert a new user into the db using our newly created user:
		await connection.execute(
			"INSERT into users (firstName, lastName, username, password, email, phoneNum) VALUES (?, ?, ?, ?, ?, ?)",
			[
				req.body.firstName,
				req.body.lastName,
				req.body.username,
				hashedPassword,
				req.body.email,
				req.body.phoneNum,
			]
		);
		res.status(201).json({ msg: "User created successfully" });
	} catch (err) {
		console.error(err.message);
		res.status(500).json({ error: "Server Error", details: err.message });
	}
});

router.post("/login", async (req, res, next) => {
	await check("username", "Username is required").notEmpty().run(req);
	await check("password", "Password is required").notEmpty().run(req);

	const errors = validationResult(req);

	if (!errors.isEmpty()) {
		return res.status(400).json({ errors: errors.array() });
	}

	passport.authenticate("local", (err, user, info) => {
		if (err) {
			return next(err);
		}
		if (!user) {
			return res.status(401).json({ msg: "Invalid credentials" });
		}
		req.logIn(user, async (err) => {
			if (err) {
				return next(err);
			}
			const token = jwt.sign(
				{ id: user._id, name: user.name },
				process.env.jwt_secret,
				{
					expiresIn: "1h",
				}
			);
			return res.status(200).json({ token });
		});
	})(req, res, next);
});

router.get("/logout", (req, res) => {
	req.logout();
	res.status(200).json({ msg: "Logout successful" });
});

module.exports = router;
